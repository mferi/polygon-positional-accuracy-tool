
# ---------------------------------------------------------------------------
# Goodchildv11.py
# Created on: 2014-06-19
# Generated by ArcGIS/ModelBuilder and modified on PythonWin
# Description: Procedure to calculate the proportion of the Tested Perimeter enclosed within the buffer based on Goodchild (1997)
# Author: Maria Feria Aguaded
# Dissertation: Quality Assessment and Analysis: How Much Do Data Gaps in the WDPA Matter?
# King's College London
# ---------------------------------------------------------------------------

# Import modules
import webapp2
import arcpy
from arcpy import env

# Local variables
tested = arcpy.GetParameterAsText(0)  #Location of Tested Source --> recorded in the database. To introduce in an arctoolbox window
reference = arcpy.GetParameterAsText(1)  #Location of Reference Source--> determined with higher accuracy. To introduce in an arctoolbox window
output = arcpy.GetParameterAsText(2) #Location of output with proportion of the Tested Perimeter wihin the buffer
scratchWorkspacePath = arcpy.GetParameterAsText(3) #Path where of temporal scratch folder will be created
arcpy.env.scratchWorkspace = scratchWorkspacePath
scratchName = arcpy.CreateScratchName("scratch","","Dataset",scratchWorkspacePath) #Create scratch folder
arcpy.CreateFolder_management(scratchWorkspacePath, scratchName)
outputBuff = arcpy.CreateScratchName("buff","","Shapefile",scratchName) #Buffer output
perimTested = arcpy.CreateScratchName("perimT","","Shapefile",scratchName) #Tested protected area as a boundary or line
perimReference = arcpy.CreateScratchName("perimR","","Shapefile",scratchName) #Reference protected area as a boundary or line
lineWithinBuff = arcpy.CreateScratchName("line","","Shapefile",scratchName) #Proportion of Protected Area Perimeter within the buffer


#Buffer width(m)
buff20 = 20
buff40 = 40
buff60 = 60
buff80 = 80
buff100 = 100
buff125 = 125
buff150 = 150
buff200 = 200
buff250= 250
buff300= 300
buff350 = 350
buff400 = 400
buff450 = 450
buff500 = 500
buff550 = 550
buff600 = 600
buff700 = 700
buff800 = 800
buff900 = 900
buff1000 = 1000
buff1250 = 1250
buff1500 = 1500
buff1750 = 1750
buff2000 = 2000
buff2500 = 2500
buff3000 = 3000
buff3500 = 3500
buff4000 = 4000
buff4500 = 4500
buff5000 = 5000
buff6000 = 6000
buff7000 = 7000
buff8000 = 8000
buff9000 = 9000
buff10000 = 10000
buff12000 = 12000
buff15000 = 15000
buff20000 = 20000
    
# Process: Polygon To line
arcpy.PolygonToLine_management(tested,perimTested,"IGNORE_NEIGHBORS")
arcpy.PolygonToLine_management(reference,perimReference,"IGNORE_NEIGHBORS")
    
# Process: Create a buffer of width equal to xi around the Reference Perimeter
# Create a list of buffering distances
buffList = [buff20, buff40, buff60, buff80, buff100, buff125, buff150, buff200, buff250, buff300, buff350, buff400, buff450, buff500, buff550, buff600, buff700, buff800, buff900, buff1000, buff1250, buff1500, buff1750, buff2000, buff2500, buff3000, buff3500, buff4000, buff4500, buff5000, buff6000, buff7000, buff8000, buff9000, buff10000, buff12000, buff15000, buff20000]
    
#Loop through each distance and create a buffer
for buff in buffList:
    # Process: Buffer
    arcpy.Buffer_analysis(perimReference,outputBuff[:-4] + str(buff), buff,"FULL","ROUND","NONE","#")
    # Process: Indicate Buffer Width
    arcpy.AddField_management(outputBuff[:-4] + str(buff)+ ".shp","BWIDTH_M","SHORT","#","#","#","#","NULLABLE","NON_REQUIRED","#")
    arcpy.CalculateField_management(outputBuff[:-4] + str(buff)+ ".shp","BWIDTH_M", buff,"PYTHON_9.3","#")
    # Process: Intersect
    arcpy.Intersect_analysis([outputBuff[:-4] + str(buff) + ".shp" , perimTested], lineWithinBuff[:-4] + str(buff), "NO_FID", "#", "INPUT")
    #Merge outputs from all intersects
    if buffList.index(buff) != 0:
        #temp arcpy.Merge_management(lineWithinBuff[:-4] + str(buff) + ".shp", lineWithinBuffAll, "#")
        arcpy.Append_management(lineWithinBuff[:-4] + str(buff) + ".shp",lineWithinBuff[:-4] + str(buffList[0]) + ".shp", "TEST","#","#")
    
lineWithinBuffAll = lineWithinBuff[:-4] + str(buffList[0]) + ".shp"
    
# Add Field
arcpy.AddField_management(perimTested,"PERIM_M","DOUBLE","#","#","#","#","NULLABLE","NON_REQUIRED","#")
arcpy.AddField_management(lineWithinBuffAll,"LENGTH_M","DOUBLE","#","#","#","#","NULLABLE","NON_REQUIRED","#")
arcpy.AddField_management(lineWithinBuffAll,"LINEWIB","DOUBLE","#","#","#","#","NULLABLE","NON_REQUIRED","#")
    
# Process: Calculate Perimeter Length
perimField = "PERIM_M"
lengthField = "LENGTH_M"
arcpy.CalculateField_management(perimTested,perimField,'float(!shape.length@meters!)',"PYTHON_9.3","#")
arcpy.CalculateField_management(lineWithinBuffAll,lengthField,'float(!shape.length@meters!)',"PYTHON_9.3","#")
    
# Call PERIMETER_M rows
perimField = "PERIM_M"
perimAverage = 0
perimTotal = 0
perimCount = 0
    
with arcpy.da.SearchCursor(perimTested, (perimField,)) as cursor:
    for perimRow in cursor:
        perimTotal += perimRow[0]
        perimCount += 1
            
perimAverage = perimTotal / perimCount
    
# Process: Calculate the proportion of the Tested Perimeter enclosed within the buffer
lineWIBuffField = "LINEWIB"
arcpy.CalculateField_management(lineWithinBuffAll,lineWIBuffField,'!LENGTH_M! * 100 / %f' % (perimAverage),"PYTHON_9.3","#")

#Copy result feauture
arcpy.CopyFeatures_management(lineWithinBuffAll, output)

# Clean up feature layers
#import shutil
#shutil.rmtree(scratchFolder)
#import os
#os.remove(scratchFolder)

